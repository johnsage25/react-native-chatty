{"version":3,"sources":["hapticEngine.ts"],"names":["hapticEngine","triggerHaptic","Platform","OS","Error","require","type","HapticType","Light","impactAsync","ImpactFeedbackStyle","Medium","Heavy","trigger","error","console","warn"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,IAAIA,YAAJ;AAEA;;;AACA,IAAIC,aAAJ;;;AAEA,IAAI;AACF,MAAIC,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAED,yBAAAJ,YAAY,GAAGK,OAAO,CAAC,cAAD,CAAtB,CALE,CAOF;;AACA,0BAAAJ,aAAa,GAAG,MAAOK,IAAP,IAA4B;AAC1C,YAAQA,IAAR;AACE,WAAKC,mBAAWC,KAAhB;AACE,cAAMR,YAAY,CAACS,WAAb,CAAyBT,YAAY,CAACU,mBAAb,CAAiCF,KAA1D,CAAN;AACA;;AACF,WAAKD,mBAAWI,MAAhB;AACE,cAAMX,YAAY,CAACS,WAAb,CAAyBT,YAAY,CAACU,mBAAb,CAAiCC,MAA1D,CAAN;AACA;;AACF,WAAKJ,mBAAWK,KAAhB;AACE,cAAMZ,YAAY,CAACS,WAAb,CAAyBT,YAAY,CAACU,mBAAb,CAAiCE,KAA1D,CAAN;AACA;;AAEF;AACE;AAZJ;AAcD,GAfD;AAgBD,CAxBD,CAwBE,MAAM;AACN,MAAI;AACF,2BAAAZ,YAAY,GAAGK,OAAO,CAAC,8BAAD,CAAtB;;AACA,4BAAAJ,aAAa,GAAG,MAAOK,IAAP,IAA4B;AAC1C,cAAQA,IAAR;AACE,aAAKC,mBAAWC,KAAhB;AACER,UAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB;AACA;;AACF,aAAKN,mBAAWI,MAAhB;AACEX,UAAAA,YAAY,CAACa,OAAb,CAAqB,cAArB;AACA;;AACF,aAAKN,mBAAWK,KAAhB;AACEZ,UAAAA,YAAY,CAACa,OAAb,CAAqB,aAArB;AACA;;AAEF;AACE;AAZJ;AAcD,KAfD;AAgBD,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD;;AACDD,EAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD","sourcesContent":["import { Platform } from 'react-native';\nimport { HapticType } from '../types/Chatty.types';\n\nlet hapticEngine: any;\n\n/* This is a function that returns a promise. It is used to trigger haptic feedback. */\nlet triggerHaptic: (type: HapticType) => Promise<void>;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  // We're intitalizing the triggerHaptic function based on package they use.\n  triggerHaptic = async (type: HapticType) => {\n    switch (type) {\n      case HapticType.Light:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light);\n        break;\n      case HapticType.Medium:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium);\n        break;\n      case HapticType.Heavy:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy);\n        break;\n\n      default:\n        break;\n    }\n  };\n} catch {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n    triggerHaptic = async (type: HapticType) => {\n      switch (type) {\n        case HapticType.Light:\n          hapticEngine.trigger('impactLight');\n          break;\n        case HapticType.Medium:\n          hapticEngine.trigger('impactMedium');\n          break;\n        case HapticType.Heavy:\n          hapticEngine.trigger('impactHeavy');\n          break;\n\n        default:\n          break;\n      }\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };\n"]}