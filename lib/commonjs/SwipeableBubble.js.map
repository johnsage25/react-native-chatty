{"version":3,"sources":["SwipeableBubble.tsx"],"names":["_SwipeableBubble","props","onReply","message","children","propsContext","PropsContext","swipeableRef","_onReply","current","close","renderLeftActions","bubbleProps","replyDragElement","SwipeableBubble","React","memo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGA,SAASA,gBAAT,CAA0BC,KAA1B,EAAmD;AAAA;;AACjD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAiCH,KAAvC;AACA,QAAMI,YAAY,GAAG,uBAAWC,oBAAX,CAArB;AACA,QAAMC,YAAY,GAAG,mBAAO,IAAP,CAArB;;AAEA,QAAMC,QAAQ,GAAG,wBAAY,MAAM;AAAA;;AACjC,QAAI,CAACL,OAAL,EAAc;AAEdD,IAAAA,OAAO,CAAEC,OAAF,CAAP,CAHiC,CAIjC;;AACA,6BAAAI,YAAY,CAACE,OAAb,gFAAsBC,KAAtB;AACD,GANgB,EAMd,CAACP,OAAD,EAAUD,OAAV,EAAmBK,YAAnB,CANc,CAAjB;;AAQA,QAAMI,iBAAiB,GAAG,wBAAY,MAAM;AAAA;;AAC1C,8DAAON,YAAY,CAACO,WAApB,2DAAO,uBAA0BC,gBAAjC,sFAAqD,6BAAC,iBAAD,YAArD;AACD,GAFyB,EAEvB,2BAACR,YAAY,CAACO,WAAd,2DAAC,uBAA0BC,gBAA3B,CAFuB,CAA1B;AAIA,MAAI,CAACX,OAAL,EAAc,OAAOE,QAAP,aAAOA,QAAP,cAAOA,QAAP,gBAAmB,6BAAC,sBAAD,EAAgBH,KAAhB,CAAnB;AAEd,sBACE,6BAAC,oCAAD;AACE,IAAA,iBAAiB,EAAEU,iBADrB;AAEE,IAAA,QAAQ,EAAE,CAFZ;AAGE,IAAA,iBAAiB,EAAE,CAHrB;AAIE,IAAA,OAAO,EAAE,MAAMH,QAAQ,EAJzB;AAKE,IAAA,8BAA8B,MALhC;AAME,IAAA,GAAG,EAAED;AANP,KAQGH,QARH,aAQGA,QARH,cAQGA,QARH,gBAQe,6BAAC,sBAAD,EAAgBH,KAAhB,CARf,CADF;AAYD;;AAEM,MAAMa,eAAe,gBAAGC,eAAMC,IAAN,CAAWhB,gBAAX,CAAxB","sourcesContent":["import React, { useCallback, useContext, useRef } from 'react';\nimport { Text } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from './ChatBubble';\nimport { PropsContext } from './Chatty';\nimport type { ISwipeableBubble } from './types/Chatty.types';\n\nfunction _SwipeableBubble(props: ISwipeableBubble) {\n  const { onReply, message, children } = props;\n  const propsContext = useContext(PropsContext);\n  const swipeableRef = useRef(null);\n\n  const _onReply = useCallback(() => {\n    if (!message) return;\n\n    onReply!(message);\n    //@ts-ignore\n    swipeableRef.current?.close();\n  }, [message, onReply, swipeableRef]);\n\n  const renderLeftActions = useCallback(() => {\n    return propsContext.bubbleProps?.replyDragElement ?? <Text> </Text>;\n  }, [propsContext.bubbleProps?.replyDragElement]);\n\n  if (!onReply) return children ?? <ChatBubble {...props} />;\n\n  return (\n    <Swipeable\n      renderLeftActions={renderLeftActions}\n      friction={2}\n      overshootFriction={2}\n      onEnded={() => _onReply()}\n      enableTrackpadTwoFingerGesture\n      ref={swipeableRef}\n    >\n      {children ?? <ChatBubble {...props} />}\n    </Swipeable>\n  );\n}\n\nexport const SwipeableBubble = React.memo(_SwipeableBubble);\n"]}