{"version":3,"sources":["TypingStatus.tsx"],"names":["_TypingStatus","_","ref","isTyping","setIsTyping","propsContext","PropsContext","LottieView","_isTyping","renderTypingBubble","typingAnimation","require","width","TypingStatus","React","memo","forwardRef"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA,SAASA,aAAT,CAAuBC,CAAvB,EAA+BC,GAA/B,EAA2D;AACzD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAAS,KAAT,CAAhC;AACA,QAAMC,YAAY,GAAG,uBAAWC,oBAAX,CAArB;AACA,QAAMC,UAAU,GAAG,yBAAnB;AAEA,kCACEL,GADF,EAEE,OAAO;AACLE,IAAAA,WAAW,EAAGI,SAAD,IAAwB;AACnCJ,MAAAA,WAAW,CAACI,SAAD,CAAX;AACD;AAHI,GAAP,CAFF,EAOE,EAPF;AAUA,MAAI,CAACL,QAAL,EAAe,OAAO,IAAP;;AAEf,MAAII,UAAJ,EAAgB;AACd,QAAIF,YAAJ,aAAIA,YAAJ,eAAIA,YAAY,CAAEI,kBAAlB,EAAsC;AACpC,aAAOJ,YAAY,CAACI,kBAAb,CAAgC;AACrCC,QAAAA,eAAe,eACb,6BAAC,UAAD;AACE,UAAA,MAAM,EAAEC,OAAO,CAAC,8BAAD,CADjB;AAEE,UAAA,QAAQ,MAFV;AAGE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT;AAHT;AAFmC,OAAhC,CAAP;AASD;;AAED,wBACE,6BAAC,sBAAD,qBACE,6BAAC,UAAD;AACE,MAAA,MAAM,EAAED,OAAO,CAAC,8BAAD,CADjB;AAEE,MAAA,QAAQ,MAFV;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT;AAHT,MADF,CADF;AASD,GAtBD,MAsBO;AACL,QAAIP,YAAJ,aAAIA,YAAJ,eAAIA,YAAY,CAAEI,kBAAlB,EAAsC;AACpC,aAAOJ,YAAY,CAACI,kBAAb,EAAP;AACD;;AAED,wBAAO,6BAAC,iBAAD,oBAAP;AACD;AACF;;AAEM,MAAMI,YAAY,gBAAGC,eAAMC,IAAN,eAAWD,eAAME,UAAN,CAAiBhB,aAAjB,CAAX,CAArB","sourcesContent":["import React, { Ref, useContext, useImperativeHandle, useState } from 'react';\nimport { Text } from 'react-native';\nimport type { ITypingStatusRef } from 'src/types/Chatty.types';\nimport { ChatBubble } from '../ChatBubble';\nimport { PropsContext } from '../Chatty';\nimport { loadLottie } from '../utils/lottie';\n\nfunction _TypingStatus(_: any, ref: Ref<ITypingStatusRef>) {\n  const [isTyping, setIsTyping] = useState(false);\n  const propsContext = useContext(PropsContext);\n  const LottieView = loadLottie();\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      setIsTyping: (_isTyping: boolean) => {\n        setIsTyping(_isTyping);\n      },\n    }),\n    []\n  );\n\n  if (!isTyping) return null;\n\n  if (LottieView) {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble({\n        typingAnimation: (\n          <LottieView\n            source={require('../assets/lottie/typing.json')}\n            autoPlay\n            style={{ width: 30 }}\n          />\n        ),\n      });\n    }\n\n    return (\n      <ChatBubble>\n        <LottieView\n          source={require('../assets/lottie/typing.json')}\n          autoPlay\n          style={{ width: 30 }}\n        />\n      </ChatBubble>\n    );\n  } else {\n    if (propsContext?.renderTypingBubble) {\n      return propsContext.renderTypingBubble();\n    }\n\n    return <Text>Typing...</Text>;\n  }\n}\n\nexport const TypingStatus = React.memo(React.forwardRef(_TypingStatus));\n"]}