{"version":3,"sources":["Chatty.types.ts"],"names":["HapticType","LayoutType","Normal","Replied","Dated","Long","Long2x","Long3x","ExtremeLong","Media","Media2x","MessageStatus","MediaType"],"mappings":"AAyIA,WAAYA,UAAZ;;WAAYA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;AAAAA,EAAAA,U;GAAAA,U,KAAAA,U;;AAkCZ,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,MAAM,EAAE,CADgB;AAExBC,EAAAA,OAAO,EAAE,CAFe;AAGxBC,EAAAA,KAAK,EAAE,CAHiB;AAIxBC,EAAAA,IAAI,EAAE,CAJkB;AAKxBC,EAAAA,MAAM,EAAE,CALgB;AAMxBC,EAAAA,MAAM,EAAE,CANgB;AAOxBC,EAAAA,WAAW,EAAE,CAPW;AAQxBC,EAAAA,KAAK,EAAE,CARiB;AASxBC,EAAAA,OAAO,EAAE;AATe,CAAnB;AAYP,WAAYC,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAuBZ,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["import type {\n  ImageSourcePropType,\n  TextStyle,\n  TouchableOpacityProps,\n  ViewStyle,\n} from 'react-native';\nimport type { ContextMenuAction } from 'react-native-context-menu-view';\nimport type { RecyclerListViewProps } from 'recyclerlistview';\n\nexport interface IUser {\n  id: number;\n  username: string;\n  avatar: ImageSourcePropType;\n}\n\nexport interface IMessage {\n  id: number;\n  text: string;\n  user: IUser;\n  me: boolean;\n  createdAt: Date;\n  repliedTo?: IMessage;\n  status?: MessageStatus;\n  media?: IMedia[];\n}\n\nexport interface IChatty {\n  messages: IMessage[];\n  headerProps: IChatHeaderProps;\n  footerProps: IFooterProps;\n  replyingTo?: IMessage;\n  bubbleProps?: Omit<IChatBubble, 'customContent'>;\n  loadEarlierProps?: ILoadEarlierProps;\n  enableHapticFeedback?: boolean;\n  enableImageUploads?: boolean;\n  renderDateProps?: Omit<IRenderDateProps, 'date'>;\n  showScrollToBottomButton?: boolean;\n  scrollToBottomProps?: Omit<IScrollToBottomProps, 'onPress'>;\n  setDateLocale?: string | ILocale;\n  listProps?: Omit<IListProps, 'rowRenderer' | 'data'>;\n  enablePatterns?: boolean;\n  enableUrlPreviews?: boolean;\n  patternProps?: IPatternProps;\n  enableSkeletonLoader?: boolean;\n  onReply?: (message: IMessage) => void;\n  renderFooter?: (props?: IFooterProps) => JSX.Element;\n  renderHeader?: (props?: IChatHeaderProps) => JSX.Element;\n  renderBubble?: (props?: IMessage) => JSX.Element;\n  renderTypingBubble?: (props?: ITypingBubble) => JSX.Element;\n}\n\nexport interface IListProps\n  extends Pick<\n    RecyclerListViewProps,\n    'onEndReached' | 'onEndReachedThreshold' | 'onScroll'\n  > {\n  rowRenderer?: (data: IMessage) => JSX.Element;\n  data: IMessage[];\n  containerStyle?: ViewStyle;\n}\n\nexport interface IChatBubble {\n  message?: IMessage;\n  containerStyle?: ViewStyle;\n  selfBubbleColor?: string;\n  otherBubbleColor?: string;\n  labelStyle?: (isSelf: boolean) => TextStyle;\n  dateStyle?: (isSelf: boolean) => TextStyle;\n  replyDragElement?: JSX.Element;\n  trailingAccessory?: JSX.Element;\n  showAvatars?: IShowAvatarProps;\n  tickProps?: ITickProps;\n  actions?: IActionProps;\n  enableCornerRounding?: boolean;\n  children?: JSX.Element;\n}\n\nexport interface IShowAvatarProps {\n  width?: number;\n  height?: number;\n  visible: boolean;\n}\n\nexport interface ISwipeableBubble\n  extends IChatBubble,\n    Pick<IChatty, 'onReply'> {\n  children?: JSX.Element;\n}\n\nexport interface IChatHeaderProps {\n  user: IUser;\n}\n\nexport interface IFooterProps extends Pick<IChatty, 'replyingTo'> {\n  onChangeText: (text: string) => void;\n  onPressSend: (data: {\n    text: string;\n    repliedTo?: IMessage;\n    media?: IMedia[];\n  }) => void;\n  onPressCancelReply: () => void;\n  closeReplyButton?: (props?: IFooterProps) => JSX.Element;\n  sendButton?: (props?: Pick<IFooterProps, 'onPressSend'>) => JSX.Element;\n  value?: string;\n  inputStyle?: ViewStyle;\n  containerStyle?: ViewStyle;\n  placeholder?: string;\n  replyStyles?: {\n    containerStyle?: ViewStyle;\n    labelStyle?: TextStyle;\n    usernameStyle?: TextStyle;\n  };\n  mentionStyles?: {\n    containerStyle?: ViewStyle;\n    labelStyle?: TextStyle;\n  };\n  renderImageAction?: (props: { onPressImage: () => void }) => JSX.Element;\n}\n\nexport interface ListRef {\n  appendMessage: (message: IMessage | IMessage[], firstIndex?: boolean) => void;\n  removeMessage: (id: number) => void;\n  scrollToEnd: (animated?: boolean) => void;\n  setIsTyping: (isTyping?: boolean) => void;\n}\n\nexport interface IReply {\n  message: IMessage;\n}\n\nexport interface ILoadEarlierProps {\n  show: boolean;\n  onLoadEarlier: () => Promise<unknown>;\n  buttonContainerStyle?: ViewStyle;\n  labelStyle?: TextStyle;\n}\n\nexport enum HapticType {\n  Light = 'light',\n  Medium = 'medium',\n  Heavy = 'heavy',\n}\n\nexport interface IRenderDateProps {\n  date: Date;\n  containerStyle?: ViewStyle;\n  labelStyle?: TextStyle;\n}\n\nexport interface IScrollToBottomProps\n  extends Pick<TouchableOpacityProps, 'onPress'> {\n  containerStyle?: ViewStyle;\n  content?: JSX.Element;\n}\n\nexport interface ITypingBubble {\n  typingAnimation?: JSX.Element;\n}\n\nexport interface IPatternShape {\n  type?: string;\n  pattern?: RegExp | string;\n  style: TextStyle;\n  onPress?: (pattern: string, index: number) => void;\n}\n\nexport interface IPatternProps {\n  allowPatterns?: Array<'mention' | 'hashtag' | 'url'>;\n  customPatterns?: IPatternShape[];\n}\n\nexport const LayoutType = {\n  Normal: 0,\n  Replied: 1,\n  Dated: 2,\n  Long: 3,\n  Long2x: 4,\n  Long3x: 5,\n  ExtremeLong: 6,\n  Media: 7,\n  Media2x: 8,\n};\n\nexport enum MessageStatus {\n  Sending = 'sending',\n  Sent = 'sent',\n  Delivered = 'delivered',\n  Read = 'readed',\n}\n\nexport interface ITickProps {\n  sendingElement?: JSX.Element;\n  sentElement?: JSX.Element;\n  deliveredElement?: JSX.Element;\n  readElement?: JSX.Element;\n}\n\nexport interface ITypingStatusRef {\n  setIsTyping: (isTyping: boolean) => void;\n}\n\nexport interface IActionProps {\n  options: Pick<ContextMenuAction, 'title' | 'destructive' | 'systemIcon'>[];\n  cancelButtonLabel?: string;\n}\n\nexport enum MediaType {\n  Image = 0,\n  Video = 1,\n  Audio = 2,\n}\n\nexport interface IMedia {\n  uri: string;\n  base64?: string;\n  type: MediaType;\n}\n\nexport interface IUrlPreviewBubble {\n  title: string;\n  image: string;\n  description: string;\n  url: string;\n}\n"]}