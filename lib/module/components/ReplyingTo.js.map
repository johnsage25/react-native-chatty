{"version":3,"sources":["ReplyingTo.tsx"],"names":["React","useCallback","useMemo","StyleSheet","Text","View","TouchableWithoutFeedback","ChatBubbleEmitter","_ReplyingTo","props","username","text","messageId","cuttedText","slice","onPressChatBubble","emit","styles","reply","replyBody","replyUsername","ReplyingTo","memo","create","borderRadius","flexDirection","padding","backgroundColor","borderLeftColor","borderLeftWidth","marginBottom","fontWeight"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,QAAuC,cAAvC;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AACA,SAASC,iBAAT,QAAkC,uBAAlC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAIG;AACD,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAZ;AAAkBC,IAAAA;AAAlB,MAAgCH,KAAtC;AAEA,QAAMI,UAAU,GAAGX,OAAO,CAAC,MAAM;AAC/B,WAAOS,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,GAAd,IAAqB,KAA5B;AACD,GAFyB,EAEvB,CAACH,IAAD,CAFuB,CAA1B;AAIA,QAAMI,iBAAiB,GAAGd,WAAW,CAAC,MAAM;AAC1CM,IAAAA,iBAAiB,CAACS,IAAlB,CAAuB,oBAAvB,EAA6CJ,SAA7C;AACD,GAFoC,EAElC,CAACA,SAAD,CAFkC,CAArC;AAIA,sBACE,oBAAC,wBAAD;AAA0B,IAAA,OAAO,EAAEG;AAAnC,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC;AAApB,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE;AAApB,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG;AAApB,KAAoCV,QAApC,CADF,eAEE,oBAAC,IAAD,QAAOG,UAAP,CAFF,CADF,CADF,CADF;AAUD;;AAED,OAAO,MAAMQ,UAAU,gBAAGrB,KAAK,CAACsB,IAAN,CAAWd,WAAX,CAAnB;AAEP,MAAMS,MAAM,GAAGd,UAAU,CAACoB,MAAX,CAAkB;AAC/BL,EAAAA,KAAK,EAAE;AACLM,IAAAA,YAAY,EAAE,EADT;AAELC,IAAAA,aAAa,EAAE,KAFV;AAGLC,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,eAAe,EAAE,SAJZ;AAKLC,IAAAA,eAAe,EAAE,SALZ;AAMLC,IAAAA,eAAe,EAAE,CANZ;AAOLC,IAAAA,YAAY,EAAE;AAPT,GADwB;AAU/BX,EAAAA,SAAS,EAAE,EAVoB;AAW/BC,EAAAA,aAAa,EAAE;AACbW,IAAAA,UAAU,EAAE;AADC;AAXgB,CAAlB,CAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport { useMemo } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TouchableWithoutFeedback } from 'react-native-gesture-handler';\nimport { ChatBubbleEmitter } from '../utils/eventEmitter';\n\nfunction _ReplyingTo(props: {\n  username: string;\n  text: string;\n  messageId: number;\n}) {\n  const { username, text, messageId } = props;\n\n  const cuttedText = useMemo(() => {\n    return text.slice(0, 100) + '...';\n  }, [text]);\n\n  const onPressChatBubble = useCallback(() => {\n    ChatBubbleEmitter.emit('replyBubblePressed', messageId);\n  }, [messageId]);\n\n  return (\n    <TouchableWithoutFeedback onPress={onPressChatBubble}>\n      <View style={styles.reply}>\n        <View style={styles.replyBody}>\n          <Text style={styles.replyUsername}>{username}</Text>\n          <Text>{cuttedText}</Text>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport const ReplyingTo = React.memo(_ReplyingTo);\n\nconst styles = StyleSheet.create({\n  reply: {\n    borderRadius: 10,\n    flexDirection: 'row',\n    padding: 10,\n    backgroundColor: '#f5f5f5',\n    borderLeftColor: '#a35d96',\n    borderLeftWidth: 6,\n    marginBottom: 10,\n  },\n  replyBody: {},\n  replyUsername: {\n    fontWeight: 'bold',\n  },\n});\n"]}