{"version":3,"sources":["patterns.ts"],"names":["loadParsedText","ReactNativeParsedText","require","default","err","console","warn","HASHTAG_PATTERN_SHAPE","pattern","style","color","MENTION_PATTERN_SHAPE","URL_PATTERN_SHAPE","type","ALL_PATERNS_SHAPES","LoadAllPaternShapes","onPress","map","Object","freeze"],"mappings":"AAEA,OAAO,SAASA,cAAT,GAA0B;AAC/B,MAAI;AACF,UAAMC,qBAAqB,GAAGC,OAAO,CAAC,0BAAD,CAAP,CAAoCC,OAAlE;;AAEA,WAAOF,qBAAP;AACD,GAJD,CAIE,OAAOG,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,IAAR,CACE,kGADF;AAGD;AACF;AAED,OAAO,MAAMC,qBAAoC,GAAG;AAClDC,EAAAA,OAAO,EAAE,QADyC;AAElDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAF2C,CAA7C;AAMP,OAAO,MAAMC,qBAAoC,GAAG;AAClDH,EAAAA,OAAO,EAAE,SADyC;AAElDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAF2C,CAA7C;AAMP,OAAO,MAAME,iBAAgC,GAAG;AAC9CC,EAAAA,IAAI,EAAE,KADwC;AAE9CJ,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE;AADF;AAFuC,CAAzC;AAOP,OAAO,MAAMI,kBAAkB,GAAG,CAChCP,qBADgC,EAEhCI,qBAFgC,EAGhCC,iBAHgC,CAA3B;AAMP;AACA;AACA;AACA;;AACA,OAAO,SAASG,mBAAT,CACLC,OADK,EAEL;AACAF,EAAAA,kBAAkB,CAACG,GAAnB,CAAwBT,OAAD,IAAa;AAClC,QAAIA,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEQ,OAAb,EAAsB;AAEtBR,IAAAA,OAAO,CAACQ,OAAR,GAAkBA,OAAlB;AACAE,IAAAA,MAAM,CAACC,MAAP,CAAcX,OAAd;AACD,GALD;AAMD","sourcesContent":["import type { IPatternShape } from 'src/types/Chatty.types';\n\nexport function loadParsedText() {\n  try {\n    const ReactNativeParsedText = require('react-native-parsed-text').default;\n\n    return ReactNativeParsedText;\n  } catch (err) {\n    console.warn(\n      \"Couldn't load react-native-parsed-text, please install it if you want to use the pattern feature\"\n    );\n  }\n}\n\nexport const HASHTAG_PATTERN_SHAPE: IPatternShape = {\n  pattern: /#(\\w+)/,\n  style: {\n    color: 'cyan',\n  },\n};\nexport const MENTION_PATTERN_SHAPE: IPatternShape = {\n  pattern: /\\B@\\w+/g,\n  style: {\n    color: 'orange',\n  },\n};\nexport const URL_PATTERN_SHAPE: IPatternShape = {\n  type: 'url',\n  style: {\n    color: 'blue',\n  },\n};\n\nexport const ALL_PATERNS_SHAPES = [\n  HASHTAG_PATTERN_SHAPE,\n  MENTION_PATTERN_SHAPE,\n  URL_PATTERN_SHAPE,\n];\n\n/**\n * Load all the patterns and set the onPress function\n * @param onPress - (pattern: string, index: number) => void\n */\nexport function LoadAllPaternShapes(\n  onPress: (pattern: string, index: number) => void\n) {\n  ALL_PATERNS_SHAPES.map((pattern) => {\n    if (pattern?.onPress) return;\n\n    pattern.onPress = onPress;\n    Object.freeze(pattern);\n  });\n}\n"]}