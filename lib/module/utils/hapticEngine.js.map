{"version":3,"sources":["hapticEngine.ts"],"names":["Platform","HapticType","hapticEngine","triggerHaptic","OS","Error","require","type","Light","impactAsync","ImpactFeedbackStyle","Medium","Heavy","trigger","error","console","warn"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,IAAIC,YAAJ;AAEA;;AACA,IAAIC,aAAJ;;AAEA,IAAI;AACF,MAAIH,QAAQ,CAACI,EAAT,KAAgB,KAApB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAEDH,EAAAA,YAAY,GAAGI,OAAO,CAAC,cAAD,CAAtB,CALE,CAOF;;AACAH,EAAAA,aAAa,GAAG,MAAOI,IAAP,IAA4B;AAC1C,YAAQA,IAAR;AACE,WAAKN,UAAU,CAACO,KAAhB;AACE,cAAMN,YAAY,CAACO,WAAb,CAAyBP,YAAY,CAACQ,mBAAb,CAAiCF,KAA1D,CAAN;AACA;;AACF,WAAKP,UAAU,CAACU,MAAhB;AACE,cAAMT,YAAY,CAACO,WAAb,CAAyBP,YAAY,CAACQ,mBAAb,CAAiCC,MAA1D,CAAN;AACA;;AACF,WAAKV,UAAU,CAACW,KAAhB;AACE,cAAMV,YAAY,CAACO,WAAb,CAAyBP,YAAY,CAACQ,mBAAb,CAAiCE,KAA1D,CAAN;AACA;;AAEF;AACE;AAZJ;AAcD,GAfD;AAgBD,CAxBD,CAwBE,MAAM;AACN,MAAI;AACFV,IAAAA,YAAY,GAAGI,OAAO,CAAC,8BAAD,CAAtB;;AACAH,IAAAA,aAAa,GAAG,MAAOI,IAAP,IAA4B;AAC1C,cAAQA,IAAR;AACE,aAAKN,UAAU,CAACO,KAAhB;AACEN,UAAAA,YAAY,CAACW,OAAb,CAAqB,aAArB;AACA;;AACF,aAAKZ,UAAU,CAACU,MAAhB;AACET,UAAAA,YAAY,CAACW,OAAb,CAAqB,cAArB;AACA;;AACF,aAAKZ,UAAU,CAACW,KAAhB;AACEV,UAAAA,YAAY,CAACW,OAAb,CAAqB,aAArB;AACA;;AAEF;AACE;AAZJ;AAcD,KAfD;AAgBD,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD;;AACDD,EAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD;;AAED,SAASb,aAAT,EAAwBD,YAAxB","sourcesContent":["import { Platform } from 'react-native';\nimport { HapticType } from '../types/Chatty.types';\n\nlet hapticEngine: any;\n\n/* This is a function that returns a promise. It is used to trigger haptic feedback. */\nlet triggerHaptic: (type: HapticType) => Promise<void>;\n\ntry {\n  if (Platform.OS === 'web') {\n    throw new Error('Haptics are not supported on web');\n  }\n\n  hapticEngine = require('expo-haptics');\n\n  // We're intitalizing the triggerHaptic function based on package they use.\n  triggerHaptic = async (type: HapticType) => {\n    switch (type) {\n      case HapticType.Light:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Light);\n        break;\n      case HapticType.Medium:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Medium);\n        break;\n      case HapticType.Heavy:\n        await hapticEngine.impactAsync(hapticEngine.ImpactFeedbackStyle.Heavy);\n        break;\n\n      default:\n        break;\n    }\n  };\n} catch {\n  try {\n    hapticEngine = require('react-native-haptic-feedback');\n    triggerHaptic = async (type: HapticType) => {\n      switch (type) {\n        case HapticType.Light:\n          hapticEngine.trigger('impactLight');\n          break;\n        case HapticType.Medium:\n          hapticEngine.trigger('impactMedium');\n          break;\n        case HapticType.Heavy:\n          hapticEngine.trigger('impactHeavy');\n          break;\n\n        default:\n          break;\n      }\n    };\n  } catch (error) {\n    console.warn('Haptic engine not found');\n  }\n  console.warn('Haptic engine not found');\n}\n\nexport { triggerHaptic, hapticEngine };\n"]}