{"version":3,"sources":["SwipeableBubble.tsx"],"names":["React","useCallback","useContext","useRef","Text","Swipeable","ChatBubble","PropsContext","_SwipeableBubble","props","onReply","message","children","propsContext","swipeableRef","_onReply","current","close","renderLeftActions","bubbleProps","replyDragElement","SwipeableBubble","memo"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,MAAzC,QAAuD,OAAvD;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,8BAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,YAAT,QAA6B,UAA7B;;AAGA,SAASC,gBAAT,CAA0BC,KAA1B,EAAmD;AAAA;;AACjD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAiCH,KAAvC;AACA,QAAMI,YAAY,GAAGX,UAAU,CAACK,YAAD,CAA/B;AACA,QAAMO,YAAY,GAAGX,MAAM,CAAC,IAAD,CAA3B;;AAEA,QAAMY,QAAQ,GAAGd,WAAW,CAAC,MAAM;AAAA;;AACjC,QAAI,CAACU,OAAL,EAAc;AAEdD,IAAAA,OAAO,CAAEC,OAAF,CAAP,CAHiC,CAIjC;;AACA,6BAAAG,YAAY,CAACE,OAAb,gFAAsBC,KAAtB;AACD,GAN2B,EAMzB,CAACN,OAAD,EAAUD,OAAV,EAAmBI,YAAnB,CANyB,CAA5B;;AAQA,QAAMI,iBAAiB,GAAGjB,WAAW,CAAC,MAAM;AAAA;;AAC1C,8DAAOY,YAAY,CAACM,WAApB,2DAAO,uBAA0BC,gBAAjC,sFAAqD,oBAAC,IAAD,YAArD;AACD,GAFoC,EAElC,2BAACP,YAAY,CAACM,WAAd,2DAAC,uBAA0BC,gBAA3B,CAFkC,CAArC;AAIA,MAAI,CAACV,OAAL,EAAc,OAAOE,QAAP,aAAOA,QAAP,cAAOA,QAAP,gBAAmB,oBAAC,UAAD,EAAgBH,KAAhB,CAAnB;AAEd,sBACE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAES,iBADrB;AAEE,IAAA,QAAQ,EAAE,CAFZ;AAGE,IAAA,iBAAiB,EAAE,CAHrB;AAIE,IAAA,OAAO,EAAE,MAAMH,QAAQ,EAJzB;AAKE,IAAA,8BAA8B,MALhC;AAME,IAAA,GAAG,EAAED;AANP,KAQGF,QARH,aAQGA,QARH,cAQGA,QARH,gBAQe,oBAAC,UAAD,EAAgBH,KAAhB,CARf,CADF;AAYD;;AAED,OAAO,MAAMY,eAAe,gBAAGrB,KAAK,CAACsB,IAAN,CAAWd,gBAAX,CAAxB","sourcesContent":["import React, { useCallback, useContext, useRef } from 'react';\nimport { Text } from 'react-native';\nimport { Swipeable } from 'react-native-gesture-handler';\nimport { ChatBubble } from './ChatBubble';\nimport { PropsContext } from './Chatty';\nimport type { ISwipeableBubble } from './types/Chatty.types';\n\nfunction _SwipeableBubble(props: ISwipeableBubble) {\n  const { onReply, message, children } = props;\n  const propsContext = useContext(PropsContext);\n  const swipeableRef = useRef(null);\n\n  const _onReply = useCallback(() => {\n    if (!message) return;\n\n    onReply!(message);\n    //@ts-ignore\n    swipeableRef.current?.close();\n  }, [message, onReply, swipeableRef]);\n\n  const renderLeftActions = useCallback(() => {\n    return propsContext.bubbleProps?.replyDragElement ?? <Text> </Text>;\n  }, [propsContext.bubbleProps?.replyDragElement]);\n\n  if (!onReply) return children ?? <ChatBubble {...props} />;\n\n  return (\n    <Swipeable\n      renderLeftActions={renderLeftActions}\n      friction={2}\n      overshootFriction={2}\n      onEnded={() => _onReply()}\n      enableTrackpadTwoFingerGesture\n      ref={swipeableRef}\n    >\n      {children ?? <ChatBubble {...props} />}\n    </Swipeable>\n  );\n}\n\nexport const SwipeableBubble = React.memo(_SwipeableBubble);\n"]}